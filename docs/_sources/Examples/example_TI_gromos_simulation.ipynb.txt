{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# TI Calculation\n"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Imports"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [
    "#for analysis\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "import numpy as np\n",
    "import pygromos\n",
    "from pygromos.files.gromos_system import Gromos_System\n",
    "from pygromos.hpc_queuing.submission_systems.local import LOCAL as subSystem\n",
    "from pygromos.files.blocks.imd_blocks import PERTURBATION, WRITETRAJ\n",
    "\n",
    "from pygromos.utils import bash"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Input files"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [],
   "source": [
    "root_dir = os.path.abspath(os.path.dirname(pygromos.__file__)+\"/../examples/example_files/TI_Calculation\")\n",
    "root_in_dir = root_dir+\"/TI_input\"\n",
    "cnf_path = root_in_dir+\"/M030_6KET.cnf\"\n",
    "top_path = root_in_dir + \"/M030_6KET.top\"\n",
    "disres_path = root_in_dir+\"/M030_6KET.disres\"\n",
    "\n",
    "\n",
    "sys_name = \"M030_to_6KET\"\n",
    "lam = 0\n",
    "\n",
    "project_dir = bash.make_folder(root_dir+\"/\"+sys_name)\n",
    "input_dir = bash.make_folder(project_dir+\"/input\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Vacuum Simulation\n",
    "\n",
    "### Direction A->B\n",
    "\n",
    "#### Setup:\n",
    "\n",
    "\n",
    "##### Build pertubation file\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [
    {
     "data": {
      "text/plain": "TITLE\nAutomatic generated pertubation file. \n\t >>> Generated with python lib function_libs utilities. (riniker group)\n\t >>> line_seperator: '\\n'\t field_seperator: '\\t'\t comments_char: '#'\nEND\nPERTATOMPARAM\n# NJLA  \t NPTB =  \t 2 \t \n \t 26\n# state_identifiers\n#  \t state1 \t state2\n#    NR   RES  NAME  IAC1mass1   CHARGE1  IAC2mass2   CHARGE2    ALPHLJ     ALPHCRF   \n    1     1    C9    16 15.035    0.05200    22 15.035    0.00000    1.00000    1.00000\n    2     1    C6    64 12.011    0.21300    22 12.011    0.00000    1.00000    1.00000\n    3     1    C2    64 12.011   -0.43400    22 12.011    0.00000    1.00000    1.00000\n    4     1    H2    20 1.008    0.16900    22 1.008    0.00000    1.00000    1.00000\n    5     1    C4    64 12.011    0.21300    22 12.011    0.00000    1.00000    1.00000\n    6     1    C7    16 15.035    0.05200    22 15.035    0.00000    1.00000    1.00000\n    7     1    C1    64 12.011   -0.43400    22 12.011    0.00000    1.00000    1.00000\n    8     1    H1    20 1.008    0.16900    22 1.008    0.00000    1.00000    1.00000\n    9     1    C5    64 12.011    0.21300    22 12.011    0.00000    1.00000    1.00000\n   10     1    C3    64 12.011   -0.43400    22 12.011    0.00000    1.00000    1.00000\n   11     1    H3    20 1.008    0.16900    22 1.008    0.00000    1.00000    1.00000\n   12     1    C8    16 15.035    0.05200    22 15.035    0.00000    1.00000    1.00000\n   13     2    H8    22 1.008    0.00000    59 1.008    0.45800    1.00000    1.00000\n   14     2    O1    22 15.9994    0.00000    68 15.9994   -0.62000    1.00000    1.00000\n   15     2    C5    22 12.011    0.00000    64 12.011    0.48400    1.00000    1.00000\n   16     2    C2    22 12.011    0.00000    64 12.011   -0.35300    1.00000    1.00000\n   17     2    H2    22 1.008    0.00000    20 1.008    0.18400    1.00000    1.00000\n   18     2    C1    22 12.011    0.00000    64 12.011   -0.10700    1.00000    1.00000\n   19     2    H1    22 1.008    0.00000    20 1.008    0.15200    1.00000    1.00000\n   20     2    C3    22 12.011    0.00000    64 12.011   -0.29800    1.00000    1.00000\n   21     2    H3    22 1.008    0.00000    20 1.008    0.14200    1.00000    1.00000\n   22     2    C6    22 12.011    0.00000    64 12.011    0.40300    1.00000    1.00000\n   23     2    C4    22 12.011    0.00000    64 12.011   -0.53100    1.00000    1.00000\n   24     2    H4    22 1.008    0.00000    20 1.008    0.19400    1.00000    1.00000\n   25     2    O2    22 15.9994    0.00000     4 15.9994   -0.38700    1.00000    1.00000\n   26     2    C7    22 15.035    0.00000    16 15.035    0.27900    1.00000    1.00000\nEND"
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pygromos.files.topology.ptp import Pertubation_topology\n",
    "from pygromos.files.blocks.topology_blocks import pertubation_lam_state, atom_lam_pertubation_state, PERTATOMPARAM, TITLE\n",
    "\n",
    "\n",
    "#External imd_changes:\n",
    "grom_system = Gromos_System(in_cnf_path=cnf_path, in_top_path=top_path,\n",
    "                            in_disres_path=disres_path,\n",
    "                            system_name=sys_name, work_folder=input_dir)\n",
    "\n",
    "\n",
    "#Build up lambda - States\n",
    "pert_atoms=[]\n",
    "for atom_line in grom_system.top.SOLUTEATOM:\n",
    "    states = {}\n",
    "    phys_state = pertubation_lam_state(IAC=atom_line.IAC, MASS=atom_line.MASS, CHARGE=atom_line.CG)\n",
    "    states = {atom_line.MRES: phys_state }\n",
    "\n",
    "    pert_atom = atom_lam_pertubation_state(atom_line.ATNM,RES=atom_line.MRES,NAME=atom_line.PANM, STATES=states)\n",
    "    pert_atoms.append(pert_atom)\n",
    "pert_atom_block = PERTATOMPARAM(pert_atoms)\n",
    "\n",
    "# Generate ptp file\n",
    "grom_system.ptp = Pertubation_topology(in_value = None)\n",
    "grom_system.ptp.PERTATOMPARAM = pert_atom_block\n",
    "grom_system.ptp.TITLE = TITLE(\"Automatic generated pertubation file. \")\n",
    "\n",
    "grom_system.ptp"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/bschroed/Documents/code/pygromos/pygromos/files/gromos_system/gromos_system.py:555: UserWarning: Did not change file path as its only promised None\n",
      "  if(self.verbose or True): warnings.warn(\"Did not change file path as its only promised \"+str(file_obj.path))\n",
      "/home/bschroed/Documents/code/pygromos/pygromos/files/gromos_system/gromos_system.py:783: UserWarning: FOUND ALREADY A FILE! SKIPPING!\n",
      "  warnings.warn(\"FOUND ALREADY A FILE! SKIPPING!\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File imd is empty , can not be written!\n"
     ]
    },
    {
     "data": {
      "text/plain": "\nGROMOS SYSTEM: M030_to_6KET\n################################################################################\nWORKDIR: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/input\nLAST CHECKPOINT: None\n\nFILES: \n\timd: None\n\ttop: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/input/M030_to_6KET.top\n\tcnf: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/input/M030_to_6KET.cnf\n\tdisres: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/input/M030_to_6KET.disres\n\tptp: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/input/M030_to_6KET.ptp\nGromosXX_bin: None\nGromosPP_bin: None\nFUTURE PROMISE: False\n\nSYSTEM: \n\tSolute:\t['M030', '6KET']  resID: [1, 2]  natoms: 26\n\tSOLVENT:\t[]  nmolecules: 0  natoms: 0\n\n"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Write out all generated files\n",
    "grom_system.rebase_files()\n",
    "\n",
    "##save Input System\n",
    "grom_system.save(root_dir+\"/initial_startSys.obj\")\n",
    "grom_system"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### RUN Emin"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [],
   "source": [
    "# PREPARE EMIN\n",
    "## IMPORT\n",
    "from pygromos.data.simulation_parameters_templates import template_emin_vac\n",
    "from pygromos.simulations.modules.preset_simulation_modules import emin\n",
    "\n",
    "grom_system = Gromos_System.load(root_dir+\"/initial_startSys.obj\")\n",
    "step_name  = \"a_emin\" #also the dir_name, out prefix etc.\n",
    "grom_system.imd = template_emin_vac #read template imd\n",
    "\n",
    "#Pertubation for molecules to sim params\n",
    "pert_block  =  PERTURBATION(NTG=1, NRDGL=0, RLAM=lam, DLAMT=0,\n",
    "                            ALPHC=0.5, ALPHLJ=0.5, NLAM=2, NSCALE=0)\n",
    "grom_system.imd.add_block(block=pert_block)\n",
    "\n",
    "#save checkpoint system\n",
    "step_dir = project_dir+\"/\"+step_name\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "################################################################################\n",
      "\n",
      "a_emin\n",
      "################################################################################\n",
      "\n",
      "Script:  /home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/job_scheduling/schedulers/simulation_scheduler.py\n",
      "################################################################################\n",
      "Simulation PREPERATION\n",
      "################################################################################\n",
      "\n",
      "\n",
      "\n",
      "################################################################################\n",
      "Simulation Setup:\n",
      "################################################################################\n",
      "\n",
      "steps_per_run:  3000\n",
      "equis:  0\n",
      "simulation runs:  1\n",
      "\n",
      "ChainSubmission - a_emin\n",
      "==============================\n",
      "\n",
      "\n",
      " submit  a_emin_1\n",
      "________________________________________\n",
      "\n",
      "\t\t NOT SUBMITTED!(inScript) as these Files were found: \n",
      "\t/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/simulation/a_emin_1/a_emin*.cnf\n",
      "################################################################################\n",
      "\n",
      " submit Final AnaLysis part \n",
      "\n",
      "/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/ana_out.log\n",
      "/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/job_analysis.py\n",
      "#####################################################################################\n",
      "\t\tERROR in Submission\n",
      "#####################################################################################\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/submission_systems/Submission_Systems.py:646: UserWarning: Queue search was called, but no queue present!\n",
      "  warnings.warn(\"Queue search was called, but no queue present!\")\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/submission_systems/Submission_Systems.py\", line 558, in submit_to_queue\n",
      "    process = bash.execute(command=command, catch_STD=True)\n",
      "  File \"/home/bschroed/Documents/code/pygromos/pygromos/utils/bash.py\", line 805, in execute\n",
      "    return execute_subprocess(command=command, verbose=verbose, catch_STD=catch_STD)\n",
      "  File \"/home/bschroed/Documents/code/pygromos/pygromos/utils/bash.py\", line 728, in execute_subprocess\n",
      "    raise ChildProcessError(msg)\n",
      "ChildProcessError: SubProcess Failed due to returncode: 1\n",
      " COMMAND: \n",
      "\tpython /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/job_analysis.py\n",
      "STDOUT:\n",
      "\t\n",
      "STDERR:\n",
      "\tb'/home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/job_scheduling/workers/analysis_workers/simulation_analysis.py:97: UserWarning: Skipping concatenation of tres, as there already exists one!\\n'\n",
      "\tb' If you want to generate a new trc. Please delete the old one!\\n'\n",
      "\tb'\\t Path:/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/analysis/data/a_emin.cnf\\n'\n",
      "\tb'  \"If you want to generate a new trc. Please delete the old one!\\\\n\\\\t Path:\"+out_prefix+\".cnf\")\\n'\n",
      "\tb'Traceback (most recent call last):\\n'\n",
      "\tb'  File \"/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/job_analysis.py\", line 36, in <module>\\n'\n",
      "\tb'    do(in_simulation_dir=in_simulation_dir, out_analysis_dir=out_analysis_dir, sim_prefix=sim_prefix, gromosPP_bin_dir=gromosPP_bin_dir, n_processes=n_processes, control_dict=control_dict, verbose=verbose, )\\n'\n",
      "\tb'  File \"/home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/job_scheduling/workers/analysis_workers/simulation_analysis.py\", line 66, in do\\n'\n",
      "\tb'    project_concatenation(in_folder=in_simulation_dir, in_prefix = sim_prefix,  out_folder=out_data_dir, control_dict=control_dict[\"concat\"][\"sub\"], verbose=verbose)\\n'\n",
      "\tb'  File \"/home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/job_scheduling/workers/analysis_workers/simulation_analysis.py\", line 126, in project_concatenation\\n'\n",
      "\tb'    verbose=verbose)\\n'\n",
      "\tb'  File \"/home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/job_scheduling/workers/analysis_workers/simulation_analysis.py\", line 254, in gather_simulation_step_file_paths\\n'\n",
      "\tb'    raise ValueError(\"could not find any file with the prefix: \" + str(filePrefix) + \" * \"+str(fileSuffixes)+\" in folder : \\\\n\" + in_folder)\\n'\n",
      "\tb\"ValueError: could not find any file with the prefix: a_emin * ['.trc', '.trc.gz', '.trc.tar.gz'] in folder : \\n\"\n",
      "\tb'/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/simulation\\n'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/job_scheduling/schedulers/simulation_scheduler.py\", line 164, in do\n",
      "    nmpi=nmpi, nomp=nomp, verbose=True)\n",
      "  File \"/home/bschroed/Documents/code/pygromos/pygromos/hpc_queuing/submission_systems/Submission_Systems.py\", line 573, in submit_to_queue\n",
      "    str(command))\n",
      "ChildProcessError: command failed: \n",
      "python /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/job_analysis.py\n"
     ]
    },
    {
     "data": {
      "text/plain": "\nGROMOS SYSTEM: a_emin\n################################################################################\nWORKDIR: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/input\nLAST CHECKPOINT: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/initial_startSys.obj\n\nFILES: \n\timd: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/input/a_emin.imd\n\ttop: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/input/a_emin.top\n\tcnf: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/analysis/data/a_emin.cnf\n\tdisres: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/input/a_emin.disres\n\tptp: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/input/a_emin.ptp\nGromosXX_bin: None\nGromosPP_bin: None\nFUTURE PROMISE: True\n\nSYSTEM: \n\tSolute:\t['M030', '6KET']  resID: [1, 2]  natoms: 26\n\tSOLVENT:\t[]  nmolecules: 0  natoms: 0\n\n"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EXECUTE EMIN\n",
    "emin_gromos_system, jobID = emin(in_gromos_system=grom_system, project_dir=project_dir,\n",
    "                          step_name=step_name, submission_system=subSystem(), in_imd_path=None)\n",
    "\n",
    "emin_gromos_system.save(step_dir+\"/emin_out.obj\")\n",
    "emin_gromos_system"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## RUN Test SD EQ"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [],
   "source": [
    "from pygromos.data.simulation_parameters_templates import template_sd\n",
    "from pygromos.simulations.modules.preset_simulation_modules import sd\n",
    "\n",
    "grom_system = Gromos_System.load(root_dir+\"/M030_to_6KET/a_emin/emin_out.obj\")\n",
    "step_name  = \"b_vacuum_sd\"\n",
    "grom_system.imd = template_sd\n",
    "\n",
    "#Pertubation\n",
    "pert_block  =  PERTURBATION(NTG=1, NRDGL=0, RLAM=lam, DLAMT=0,\n",
    "                            ALPHC=0.5, ALPHLJ=0.5, NLAM=2, NSCALE=0)\n",
    "grom_system.imd.add_block(block=pert_block)\n",
    "\n",
    "#write out trajs:\n",
    "write_traj = WRITETRAJ(NTWX=100, NTWE=100)\n",
    "grom_system.imd.add_block(block=write_traj)\n",
    "step_dir = project_dir+\"/\"+step_name\n",
    "\n",
    "#further mods:\n",
    "grom_system.imd.CONSTRAINT.NTC = 3\n",
    "grom_system.imd.FORCE.BONDS = 0\n",
    "\n",
    "grom_system.imd.COVALENTFORM.NTBAH = 0\n",
    "grom_system.imd.COVALENTFORM.NTBDN = 0\n",
    "grom_system.imd.COVALENTFORM.NTBBH = 0\n",
    "\n",
    "grom_system.imd.STEP.NSTLIM = 30000\n",
    "\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "################################################################################\n",
      "\n",
      "b_vacuum_sd\n",
      "################################################################################\n",
      "\n",
      "============================================================\n",
      "FOUND RESULT: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/b_vacuum_sd/analysis/data/b_vacuum_sd.cnf\n",
      " GOING TO SKIPT THIS SUBMISSION!\n"
     ]
    },
    {
     "data": {
      "text/plain": "\nGROMOS SYSTEM: b_vacuum_sd\n################################################################################\nWORKDIR: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/b_vacuum_sd/input\nLAST CHECKPOINT: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/emin_out.obj\n\nFILES: \n\timd: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/b_vacuum_sd/input/b_vacuum_sd.imd\n\ttop: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/b_vacuum_sd/input/b_vacuum_sd.top\n\tcnf: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/b_vacuum_sd/analysis/data/b_vacuum_sd.cnf\n\tdisres: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/b_vacuum_sd/input/b_vacuum_sd.disres\n\tptp: /home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/b_vacuum_sd/input/b_vacuum_sd.ptp\nGromosXX_bin: None\nGromosPP_bin: None\nFUTURE PROMISE: False\n\nSYSTEM: \n\tSolute:\t['M030', '6KET']  resID: [1, 2]  natoms: 26\n\tSOLVENT:\t[]  nmolecules: 0  natoms: 0\n\n"
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sd_gromos_system, jobID  = sd(in_gromos_system=emin_gromos_system, project_dir=project_dir,\n",
    "                              step_name=step_name, submission_system=subSystem(),\n",
    "                      equilibration_runs=1, simulation_runs=1)\n",
    "sd_gromos_system.save(step_dir+\"/sd_out_system.obj\")\n",
    "sd_gromos_system"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Further Analysis:\n",
    "Transform the trc into a pdb traj to check it out with pymol :!)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [],
   "source": [
    "#final analysis dir:\n",
    "from pygromos.utils import bash\n",
    "\n",
    "out_ana = project_dir+\"/c_ana\"\n",
    "if(not os.path.exists(out_ana)):\n",
    "    bash.make_folder(out_ana)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "outputs": [
    {
     "data": {
      "text/plain": "'/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/M030_to_6KET/a_emin/analysis/data/a_emin.pdb'"
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pygromos.files.coord import Cnf\n",
    "in_path=project_dir+\"/a_emin/analysis/data/a_emin.cnf\"\n",
    "cnf_file = Cnf(in_path)\n",
    "cnf_file.write_pdb(in_path.replace(\"cnf\", \"pdb\"))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "outputs": [
    {
     "data": {
      "text/plain": "Trajectory: \n\tRead from hdf save \n\tContains only database\n\t\nType: \n\tTrc\nFrames: \t300\t Columns:\t28\n"
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pygromos.files.trajectory.trc import Trc\n",
    "\n",
    "in_path=project_dir+\"/b_vacuum_sd/analysis/data/b_vacuum_sd.trc.h5\"\n",
    "\n",
    "trc = Trc(input_value=in_path)\n",
    "trc.write_pdb(out_ana+\"/sd_traj.pdb\", cnf_file=cnf_path)#grom_system.cnf.path)\n",
    "trc"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "outputs": [
    {
     "data": {
      "text/plain": "Trajectory: \n\tRead from hdf save \n\tContains only database\n\t\nType: \n\tTre\nFrames: \t300\t Columns:\t15\n"
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pygromos.files.trajectory.tre import Tre\n",
    "\n",
    "in_path=project_dir+\"/b_vacuum_sd/analysis/data/b_vacuum_sd.tre.h5\"\n",
    "\n",
    "tre = Tre(input_value=in_path)\n",
    "tre\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot Potential Energies\n",
    "V_tot = np.array(list(map(lambda x: x[2], tre.database.totals)))\n",
    "step = len(tre.database.TIMESTEP_time)//10\n",
    "\n",
    "plt.plot(tre.database.TIMESTEP_time, V_tot)\n",
    "plt.xticks(np.round(list(tre.database.TIMESTEP_time[::step]),2))\n",
    "plt.xlabel(\"$t~[ps]$\")\n",
    "plt.ylabel(\"$V~[kJ]$\")\n",
    "plt.title(\"V total timeseries\")\n",
    "plt.savefig(out_ana+\"/potential_energy_timeseries.png\")\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Lambda Sampling\n",
    "\n",
    "### Setup again"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/6KET_to_M030/b_vacuum_sd/sd_out_system.obj'",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mFileNotFoundError\u001B[0m                         Traceback (most recent call last)",
      "\u001B[0;32m<ipython-input-14-b7474329928e>\u001B[0m in \u001B[0;36m<module>\u001B[0;34m\u001B[0m\n\u001B[1;32m      9\u001B[0m \u001B[0mproject_dir\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mbash\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mmake_folder\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mroot_dir\u001B[0m\u001B[0;34m+\u001B[0m\u001B[0;34m\"/\"\u001B[0m\u001B[0;34m+\u001B[0m\u001B[0msys_name\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     10\u001B[0m \u001B[0msys_path\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0;34m\"/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/6KET_to_M030/b_vacuum_sd/sd_out_system.obj\"\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m---> 11\u001B[0;31m \u001B[0msd_gromos_system\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mGromos_System\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mload\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0msys_path\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m     12\u001B[0m \u001B[0msd_gromos_system\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m     13\u001B[0m \u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;32m~/Documents/code/pygromos/pygromos/files/gromos_system/gromos_system.py\u001B[0m in \u001B[0;36mload\u001B[0;34m(cls, path)\u001B[0m\n\u001B[1;32m    803\u001B[0m         \"\"\"\n\u001B[1;32m    804\u001B[0m         \u001B[0;32mif\u001B[0m \u001B[0;34m(\u001B[0m\u001B[0misinstance\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mpath\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mstr\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0;32m--> 805\u001B[0;31m             \u001B[0mbufferedReader\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mopen\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mpath\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0;34m\"rb\"\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[0m\u001B[1;32m    806\u001B[0m         \u001B[0;32melif\u001B[0m \u001B[0;34m(\u001B[0m\u001B[0misinstance\u001B[0m\u001B[0;34m(\u001B[0m\u001B[0mpath\u001B[0m\u001B[0;34m,\u001B[0m \u001B[0mio\u001B[0m\u001B[0;34m.\u001B[0m\u001B[0mBufferedReader\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m)\u001B[0m\u001B[0;34m:\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n\u001B[1;32m    807\u001B[0m             \u001B[0mbufferedReader\u001B[0m \u001B[0;34m=\u001B[0m \u001B[0mpath\u001B[0m\u001B[0;34m\u001B[0m\u001B[0;34m\u001B[0m\u001B[0m\n",
      "\u001B[0;31mFileNotFoundError\u001B[0m: [Errno 2] No such file or directory: '/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/6KET_to_M030/b_vacuum_sd/sd_out_system.obj'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from pygromos.files.gromos_system import Gromos_System\n",
    "from pygromos.hpc_queuing.submission_systems.local import LOCAL as subSystem\n",
    "\n",
    "from pygromos.utils import bash\n",
    "sys_name = \"M030_to_6KET\"\n",
    "root_dir = os.path.abspath(os.path.dirname(pygromos.__file__)+\"/../examples/example_files/TI_Calculation\")\n",
    "\n",
    "project_dir = bash.make_folder(root_dir+\"/\"+sys_name)\n",
    "sys_path = \"/home/bschroed/Documents/code/pygromos/examples/example_files/TI_Calculation/6KET_to_M030/b_vacuum_sd/sd_out_system.obj\"\n",
    "sd_gromos_system = Gromos_System.load(sys_path)\n",
    "sd_gromos_system"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Submission"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "from pygromos.simulations.modules.ti_modules import TI_sampling\n",
    "\n",
    "step_name  = \"d_lambda_sampling\"\n",
    "\n",
    "TI_sampling(in_gromos_system = sd_gromos_system, project_dir=project_dir, step_name  = step_name,\n",
    "            lambda_values= np.arange(0, 1.1, 0.1),\n",
    "            subSystem=subSystem(), n_simulation_repetitions = 3, n_equilibrations = 1)\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Direction B->A\n",
    "\n",
    "#### Setup:"
   ],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}